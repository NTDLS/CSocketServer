///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright © NetworkDLS 2002, All rights reserved
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _CSocketServer_WSAInterface_Cpp
#define _CSocketServer_WSAInterface_Cpp
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define _WIN32_WINNT 0x0500
#define WIN32_LEAN_AND_MEAN

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <WinSock2.H>
#include <WinSock.H>
#include <Windows.H>
#include <Stdio.H>
#include <Stdlib.H>
#include <Time.H>

#include "CSocketServer.H"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Interface to WSAStartup()
*/
bool CSocketServer::p_StartWindowsSocket(void)
{
	WORD WSARequiredVersion = 0x0101; // Version 1.1
	WSADATA WSAData;
	WSADATA *WSAPointerData = &WSAData;

	if (WSAStartup(WSARequiredVersion, WSAPointerData) != 0)
	{
		return this->p_ThrowError(9);
	}

	this->p_iSocketLimit = WSAPointerData->iMaxSockets;

	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Interface to WSACleanup()
*/
bool CSocketServer::p_StopWindowsSocket(void)
{
	if (WSACleanup() == SOCKET_ERROR)
	{
		return this->p_ThrowError(10);
	}

	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
