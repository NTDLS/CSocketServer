///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright © NetworkDLS 2002, All rights reserved
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _CSocketServer_Locks_Cpp
#define _CSocketServer_Locks_Cpp
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define _WIN32_WINNT 0x0500
#define WIN32_LEAN_AND_MEAN

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <WinSock2.H>
#include <WinSock.H>
#include <Windows.H>
#include <Stdio.H>
#include <Stdlib.H>
#include <Time.H>

#include "CSocketServer.H"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Locks the internal "Data Pump" Critical Section. This Critical Section is used
		by all of the internal data protection mechanisms and can be used externally for low level locking.
*/
void CSocketServer::Lock(void)
{
	EnterCriticalSection(&this->p_TcpPumpLock);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Locks the internal "Data Pump" Critical Section. See: Lock()
*/
bool CSocketServer::TryLock(void)
{
	if (TryEnterCriticalSection(&this->p_TcpPumpLock))
	{
		return true;
	}
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	UnLocks the internal "Data Pump" Critical Section. See: Lock()
*/
void CSocketServer::Unlock(void)
{
	LeaveCriticalSection(&this->p_TcpPumpLock);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Locks the internal "Data Pump" Critical Section. This Critical Section is used
		by all of the internal data protection mechanisms and can be used externally for low level locking.
*/
void CSocketClient::Lock(void)
{
	((CSocketServer *)this->pSockServer)->Lock();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Locks the internal "Data Pump" Critical Section. See: Lock()
*/
bool CSocketClient::TryLock(void)
{
	return ((CSocketServer *)this->pSockServer)->TryLock();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	UnLocks the internal "Data Pump" Critical Section. See: Lock()
*/
void CSocketClient::Unlock(void)
{
	((CSocketServer *)this->pSockServer)->Unlock();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
